type = "SSC"
) , .("locality" = id)][sub_size, on = "locality"]
iloc_tbl = iloc_tbl[, .(
"postcode" = poa,
long = mean(long),
lat = mean(lat),
type = "ILOC"
) , .(locality = id)][iloc_size, on = "locality"]
all_dat = rbind(sub_tbl, iloc_tbl)
all_dat$area_pc = round(all_dat$area*100,4)
all_dat
all_dat[,.(postcode,locality,type,area_pc,state, long, lat)]
all_dat[order(type, area_pc),.(postcode,locality,type,area_pc,state, long, lat)]
#postcode grabbing function ----------------------------------------
get_suburbs = function(poa) {
message(poa)
shape_i = postcode_shapes %>%
subset(POA_NAME16 == poa)
sub_areas = raster::intersect(burbs, shape_i)
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_size$area = sub_size$area / sum(sub_size$area)
iloc_areas = raster::intersect(ilocs, shape_i)
iloc_tbl = data.table::data.table(ggplot2::fortify(iloc_areas, region = "ILOC_NAME"))
iloc_size = data.frame(locality = as.character(iloc_areas$ILOC_NAME),
area = geosphere::areaPolygon(iloc_areas),
state = iloc_areas$STATE_NAME)
iloc_size$area = iloc_size$area / sum(iloc_size$area)
sub_tbl = sub_tbl[, .(
"postcode" = poa,
long = mean(long),
lat = mean(lat),
type = "SSC"
) , .("locality" = id)][sub_size, on = "locality"]
iloc_tbl = iloc_tbl[, .(
"postcode" = poa,
long = mean(long),
lat = mean(lat),
type = "ILOC"
) , .(locality = id)][iloc_size, on = "locality"]
all_dat = rbind(sub_tbl, iloc_tbl)
all_dat$area_pc = round(all_dat$area*100,4)
all_dat = all_dat[order(type, area_pc),
.(postcode, locality, type, area_pc, state, long, lat)]
return(all_dat)
}
get_suburbs(2121)
poa = 2121
message(poa)
shape_i = postcode_shapes %>%
subset(POA_NAME16 == poa)
sub_areas = raster::intersect(burbs, shape_i)
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_size$area = sub_size$area / sum(sub_size$area)
iloc_areas = raster::intersect(ilocs, shape_i)
sub_size
sum(sub_size$area)
sub_size$area = sub_size$area / sum(sub_size$area)
iloc_areas = raster::intersect(ilocs, shape_i)
ilocs
message(poa)
shape_i = postcode_shapes %>%
subset(POA_NAME16 == poa)
sub_areas = raster::intersect(burbs, shape_i)
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_areas = raster::intersect(burbs, shape_i)
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_areas = raster::intersect(burbs, shape_i)
sub_areas = raster::intersect(burbs, shape_i)
sub_areas = raster::intersect(burbs, shape_i)
burbs
#set up postcode shapes --------------------------------------------
burbs = iloc::shape_ssc #store subrub shapes
ilocs = iloc::shape_iloc
message(poa)
shape_i = postcode_shapes %>%
subset(POA_NAME16 == poa)
sub_areas = raster::intersect(burbs, shape_i)
poa
POA_NAME16
postcode_shapes$POA_NAME16
2121 %in% postcode_shapes$POA_NAME16
find_suburbs = function(postcodes = NULL) {
postcodes = trimws(sprintf("%04d", na.omit(postcodes)))
postcods = postcodes[postcodes != "NA"]
postcode_shapes = iloc::shape_poa
all_postcodes = as.character(iloc::shape_poa$POA_NAME16)
if(is.null(postcodes)) {
message("Finding ALL SUBURBS!!")
p = all_postcodes
}else{
p = postcodes
}
#check all postcodes are OK
if(!all(p %in% all_postcodes)) warning("Mystery postcodes: ",paste(p[!p %in% all_postcodes], collapse = ", "), call. = F)
#keep desired suburbs -----------------------------------------------
postcode_shapes = postcode_shapes %>%
subset(POA_NAME16 %in% p) #subset suburb shapes to those desired
#set up postcode shapes --------------------------------------------
burbs = iloc::shape_ssc #store subrub shapes
ilocs = iloc::shape_iloc
#postcode grabbing function ----------------------------------------
get_suburbs = function(poa) {
message(poa)
shape_i = postcode_shapes %>%
subset(POA_NAME16 == poa)
sub_areas = raster::intersect(burbs, shape_i)
# get data per region
sub_tbl = data.table::data.table(ggplot2::fortify(sub_areas, region = "SSC_NAME16"))
sub_size = data.frame(locality = as.character(sub_areas$SSC_NAME16),
area = geosphere::areaPolygon(sub_areas),
state = sub_areas$STE_NAME16)
sub_size$area = sub_size$area / sum(sub_size$area)
iloc_areas = raster::intersect(ilocs, shape_i)
iloc_tbl = data.table::data.table(ggplot2::fortify(iloc_areas, region = "ILOC_NAME"))
iloc_size = data.frame(locality = as.character(iloc_areas$ILOC_NAME),
area = geosphere::areaPolygon(iloc_areas),
state = iloc_areas$STATE_NAME)
iloc_size$area = iloc_size$area / sum(iloc_size$area)
sub_tbl = sub_tbl[, .(
"postcode" = poa,
long = mean(long),
lat = mean(lat),
type = "SSC"
) , .("locality" = id)][sub_size, on = "locality"]
iloc_tbl = iloc_tbl[, .(
"postcode" = poa,
long = mean(long),
lat = mean(lat),
type = "ILOC"
) , .(locality = id)][iloc_size, on = "locality"]
all_dat = rbind(sub_tbl, iloc_tbl)
all_dat$area_pc = round(all_dat$area*100,4)
all_dat = all_dat[order(type, area_pc),
.(postcode, locality, type, area_pc, state, long, lat)]
return(all_dat)
}
#start finding postcodes ------------------------------------------
message("finding postcodes...")
pb = txtProgressBar(min = 0,
max = length(p),
style = 3)
out_postcodes = lapply(seq_along(p), function(x) {
pc = get_suburbs(p[x])
setTxtProgressBar(pb, x)
return(pc)
}) %>%
do.call(rbind, .)
close(pb)
message("postcodes found")
return(out_postcodes)
} #end of function
find_suburbs(2121)
library(iloc)
iloc::find_suburbs(2121)
iloc::find_suburbs(800)
iloc::find_suburbs(2121)
iloc::data_poa$Count_Persons_other_dwgs_P
shell.exec()
shell.exec(getwd())
shell.exec(getwd())
library(iloc)
?EBICglasso
?glasso
install.packages("bootnet")
# load the required packages and the data file
# ensure the required data is in the setwd()
library(qgraph)
library(ggplot2)
library(bootnet)
library(glasso)
library(igraph)
library(mice)
data <- readRDS(data)
# to ensure the code is replicable, use the set.seed function
set.seed(1234)
# extract and rename the variables
vars <- na)
# extract and rename the variables
vars <- names(data)
# create the correlation matrix and perform the network analysis
asp_cor <- as.matrix(cor_auto(vars))
cor_auto(vars)
vars
# create the correlation matrix and perform the network analysis
asp_cor <- cor(mtcars)
glasso <- EBICglasso(asp_cor, n=nrow(vars))
# extract and rename the variables
vars <- names(mtcars)
?cor_auto
# create the correlation matrix and perform the network analysis
asp_cor <- as.matrix(cor(mtcars))
asp_cor
glasso <- EBICglasso(asp_cor)
glasso <- EBICglasso(asp_cor, n = 1000)
glasso
netglasso2 <- qgraph(glasso, labels = colnames(vars), layout="spring", theme = "gray", label.prop = 0.95)
corx::plot_mds(corx::corx(mtcars))
corx::plot_mds(corx::corx(mtcars))\
corx::plot_mds(corx::corx(mtcars))
netglasso2 <- qgraph(glasso, labels = colnames(vars), layout="spring", theme = "gray", label.prop = 0.95)
# extract the edge weights and store them in a vector
ew <- glasso[upper.tri(glasso)]
# sum the number of edges
sum(ew!=0)
# sum the number of positive edges
sum(ew>0)
# sum the number of negative edges
sum(ew<0)
# plot the centrality indices
centralityPlot(glasso = netglasso2, include = c("Strength", "Betweenness","Closeness"))
# use bootstrapping to test the stability of the centrality indices
EBIC_asp_net <- estimateNetwork(vars, default = "EBICglasso")
EBIC_network_stability_boot <- bootnet(EBIC_asp_net, nBoots = 2500, type = "person", nCores = 8, statistics = c("strength", "betweenness","closeness"))
# plot the stability of the centrality metrics
plot(EBIC_network_stability_boot, statistics = c("strength", "betweenness","closeness"))
corStability(EBIC_network_stability_boot)
# Spinglass node grouping
# See http://psych-networks.com/r-tutorial-identify-communities-items-networks/
g = as.igraph(netglasso2, attributes=TRUE)
sgc <- spinglass.community(g)
# see the number of communitities identified by the
sgc$membership
# visualise the sub-communities
groups <- c("Health","Affiliation","Popularity","Financial","Hedonism","Image","Power","Selfexpression","Mastery","Socialadherence","Spirituality","Community","Safety")
spinglass_model = list(Intrinsic=c(1,2,8,9,11,12,13), Extrinsic=c(3,4,5,6,7,10))
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = nrow(vars),  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray', pastel = TRUE,
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 30,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray', pastel = TRUE,
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray', pastel = TRUE,
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
glassoGraph
qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray', pastel = TRUE,
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
netglasso2
netglasso2$layout
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray', pastel = TRUE,
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model, palette = 'gray',
esize = 20, legend.cex = 0.6, label.cex = 1.0, label.prop = 1.7)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,  # filetype = "pdf",
labels = groups,
# nodeNames = Names,
groups = spinglass_model,)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",
graph = "glasso", sampleSize = 1000,groups = spinglass_model,)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",, sampleSize = 1000,groups = spinglass_model,)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",graph = "glasso", sampleSize = 1000,groups = spinglass_model,)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "",graph = "glasso", sampleSize = 1000,groups = spinglass_model)
# Display glassoGraph with spinglass groupings
glassoGraph <- qgraph(asp_cor, layout = netglasso2$layout, title = "")
library(corx)
plot_mds(corx(mtcars))
# plot the centrality indices
centralityPlot(glasso = netglasso2, include = c("Strength", "Betweenness","Closeness"))
# extract the edge weights and store them in a vector
ew <- glasso[upper.tri(glasso)]
ew
netglasso2 <- qgraph(glasso, labels = colnames(vars), layout="spring", theme = "gray", label.prop = 0.95)
netglasso2 <- qgraph(asp_cor, labels = colnames(vars), layout="spring", theme = "gray", label.prop = 0.95)
netglasso2 <- qgraph(asp_cor, labels = colnames(vars), layout="spring", theme = "gray")
netglasso2 <- qgraph(cor(mtcars), labels = colnames(vars), layout="spring", theme = "gray")
netglasso2 <- qgraph(cor(mtcars), layout="spring", theme = "gray")
netglasso2
netglasso2 <- qgraph(cor(mtcars), layout="spring", theme = "gray")
plot_mds(corx(mtcars))
plot_mds(corx(mtcars), 3)
plot_mds(corx(mtcars), 4)
plot_mds(corx(mtcars), 5)
iloc::data_dictionary()
iloc::iarea_demog(variables = "Part_inc_st_Hh_with_Indig_psn")
iloc::iarea_demog(variables = "Negative_Nil_income_P")
iloc::iarea_demog(variables = "Me_hh_in_wk_In_ps_hh_In_ps")
iloc::iarea_demog(variables = "Me_p_in_wk_In_ps_hh_In_ps")
420*2.8
library(iloc)
all_demogs = iloc::data_iarea
all_demogs
usethis::use_package("tidyselect")
library(iloc)
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(unique(all_demogs$variable),{{variables}})
unique(all_demogs$variable)
iarea_demog = function(variables, iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{variables}})
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
demographics[demographics$variable %in% variables,]
}
iarea_demog(Tot_Indig_st_nsP)
library(dplyr)
iarea_demog(Tot_Indig_st_nsP)
library(iloc)
iarea_demog = function(variables, iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{variables}})
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
demographics = demographics[demographics$variable == variables,]
demographics$variable = names(variables)
}
iarea_demog(Tot_Indig_st_nsP)
iarea_demog = function(variables, iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{variables}})
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
demographics = demographics[demographics$variable == variables,]
demographics$variable = names(variables)
demographics
}
iarea_demog(Tot_Indig_st_nsP)
iarea_demog( test =  Tot_Indig_st_nsP)
iarea_demog(list(test = Tot_Indig_st_nsP)_
iarea_demog(c(test = Tot_Indig_st_nsP))
iloc::data_dictionary()
iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
iarea_demog = function(variables, iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{variables}})
return(variables)
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
demographics = demographics[demographics$variable == variables,]
demographics$variable = names(variables)
demographics
}
iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
varaibles = iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
variables = iarea_demog(c(Tot_Indig_st_nsP, Tot_p_NonInd_P))
iarea = "IARE401016"
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
demographics[demographics$variable == variables,]
variables
demographics[demographics$variable == variables,]
variables
library(iloc)
demographics$variable == variables
demographics[demographics$variable %in% variables,]
which(demographics$variable == variables)
demographics$variable == variables
table(demographics$variable == variables)
variables
variables
variables_rows = lapply(variables, function(v){
which(demographics$variable == unlist(v))
})
variables_rows
demographics = demographics[variables_rows,]
variables_rows
variables_rows = unlist(lapply(variables, function(v){
which(demographics$variable == unlist(v))
}))
demographics = demographics[variables_rows,]
demographics
names(variables)
iarea_demog = function(..., iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{...}})
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
variables_rows = unlist(lapply(variables, function(v){
which(demographics$variable == unlist(v))
}))
demographics = demographics[variables_rows,]
demographics$variable = names(variables)
demographics
}
all_demogs
iarea_demog
iarea_demog(males = Tot_p_Indig_M,
females = Tot_p_Indig_F)
iarea_demog = function(..., iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),{{...}})
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
variables_rows = unlist(lapply(variables, function(v){
which(demographics$variable == unlist(v))
}))
demographics = demographics[variables_rows,]
demographics$variable = names(variables)
demographics
}
iarea_demog(males = Tot_p_Indig_M,
females = Tot_p_Indig_F)
iarea_demog = function(..., iarea = "IARE401016"){
all_demogs = iloc::data_iarea
variables = tidyselect::vars_select(as.character(unique(all_demogs$variable)),...)
demographics = iloc::data_iarea %>%
filter(IARE_CODE_2016 %in% iarea)
variables_rows = unlist(lapply(variables, function(v){
which(demographics$variable == unlist(v))
}))
demographics = demographics[variables_rows,]
demographics$variable = names(variables)
demographics
}
iarea_demog(males = Tot_p_Indig_M,
females = Tot_p_Indig_F)
library(iloc)
grogapp::grog_data()
map_only = function(iloc = "Port Adelaide",
maptype = "watercolor",
zoom = 5,
gap = .07,
left_adjust = 0,
bottom_adjust = 0,
right_adjust = 0,
top_adjust = 0,
...) {
#START FUNCTION
iloc = iloc_find(iloc) #get all matches
##Helper function(s)
#check names
Conigrave::check_names(iloc, as.character(iloc::iloc_names[[1]])) #first we check to see if the target area is spelled correctly.
iloc_f = iloc::shape_iloc %>%
subset(ILOC_NAME %in% iloc) #subset iloc shapes to desired iloc
shp_tb = ggplot2::fortify(iloc_f, region = "ILOC_NAME") %>% tibble::as_tibble()
#--------------------------- add column totals
# Get map base ####
map = ggmap::get_stamenmap(
bbox = c(
left = min(shp_tb$long, na.rm = T) - gap + left_adjust,
bottom = min(shp_tb$lat, na.rm = T) - gap + bottom_adjust,
right = max(shp_tb$long, na.rm = T) + gap + right_adjust,
top = max(shp_tb$lat, na.rm = T) + gap + top_adjust
)
,
maptype = maptype,
zoom = zoom,
...
)
return(ggmap::ggmap(map))
}
library(dplyr)
stop::unpack_fns("iloc")
map_only("Port Adelaide")
map_only("Port Adelaide")
map_only("*")
library(iloc)
rstudioapi::initializeProject("C:/Users/jcon4884/Dropbox (Sydney Uni)/3_Tx/10_reporting_publicity/presentations/2019 APSAD")
install.packages(c("ggmap","raster","rgeos"))
library(iloc)
iloc::iloc_map("Port Adelaide")
iloc::iloc_find("Port Adelaide")
iloc::iloc_map("Port Adelaide")
iloc::iloc_map("Port Adelaide")
iloc::iloc_map("Wollongong")
